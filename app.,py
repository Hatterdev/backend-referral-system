import os
import json
import logging
from datetime import datetime
import schedule
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

# ========================
# Configurações
# ========================

app = Flask(__name__)
CORS(app)

# Inicializa o Limiter após o app
limiter = Limiter(app=app, key_func=get_remote_address)

logging.basicConfig(level=logging.INFO)

PORT = int(os.environ.get("PORT", 5000))
DATA_FILE = "referrals.json"
BACKUP_FOLDER = "backups"
SECRET_KEY = "SUA_CHAVE_SECRETA_PARA_MARCAR_COMO_PAGO"

# ========================
# Funções auxiliares para manipular o JSON
# ========================

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w") as f:
            json.dump({"referrals": [], "paid_referrals": []}, f)
    with open(DATA_FILE, "r") as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


def is_valid_address(addr):
    return addr.startswith("0x") and len(addr) == 42


def get_referral(referee):
    db = load_data()
    return next((item for item in db["referrals"] if item["referee"] == referee), None)


def get_referrer_info(referrer):
    db = load_data()

    total_points = 0
    total_paid = 0
    referrals = []

    for ref in db["referrals"]:
        if ref["referrer"] == referrer:
            total_points += ref.get("points", 0)
            referrals.append(ref)

    for paid in db["paid_referrals"]:
        if paid["referrer"] == referrer:
            total_paid += paid.get("total_paid", 0)

    return {
        "total_points": round(total_points, 2),
        "total_paid": round(total_paid, 2),
        "total_unpaid": round(total_points - total_paid, 2),
        "referrals": referrals
    }

# ========================
# Backup Automático Diário
# ========================

def backup_json_file():
    if not os.path.exists(BACKUP_FOLDER):
        os.makedirs(BACKUP_FOLDER)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = os.path.join(BACKUP_FOLDER, f"referrals_backup_{timestamp}.json")

    try:
        data = load_data()
        with open(backup_path, "w") as f:
            json.dump(data, f, indent=2)
        logging.info(f"Backup realizado: {backup_path}")
    except Exception as e:
        logging.error(f"Falha ao fazer backup: {e}")


def start_backup_scheduler():
    schedule.every().day.at("00:00").do(backup_json_file)
    while True:
        schedule.run_pending()
        time.sleep(60)

# ========================
# API Flask - ROTAS
# ========================

@app.route("/api/register-referral", methods=["POST"])
def register_referral():
    data = request.get_json()
    address = data.get("address", "").lower()

    if not is_valid_address(address):
        return jsonify({"error": "Endereço inválido"}), 400

    db = load_data()
    existing = next((item for item in db["referrals"] if item["referrer"] == address), None)
    if not existing:
        db["referrals"].append({
            "referrer": address,
            "referee": "",
            "points": 0
        })
        save_data(db)

    return jsonify({"message": "Link registrado localmente"}), 200


@app.route("/api/use-referral", methods=["POST"])
@limiter.limit("3/minute")
def use_referral():
    data = request.get_json()
    referrer = data.get("referrer", "").lower()
    referee = data.get("referee", "").lower()
    faucet_token = data.get("faucet_token", "")

    if not is_valid_address(referrer) or not is_valid_address(referee):
        return jsonify({"error": "Endereço inválido"}), 400

    if faucet_token != "VALID_FAUCET_USAGE":
        return jsonify({"error": "Token inválido"}), 401

    db = load_data()

    # Verifica se já foi referido por alguém
    existing = get_referral(referee)
    if existing:
        return jsonify({"error": "Já foi indicado por outra carteira."}), 400

    # Conta número de indicações do referenciador
    total_referrals = sum(1 for item in db["referrals"] if item["referrer"] == referrer)
    if total_referrals >= 200:
        return jsonify({"error": "Limite de indicações atingido"}), 400

    # Registra nova indicação
    db["referrals"].append({
        "referrer": referrer,
        "referee": referee,
        "points": 0.01,  # Referrer ganha 0.01
        "last_used": datetime.now().isoformat()
    })

    # Registrar recompensa para o referee
    db["referrals"].append({
        "referrer": "system",
        "referee": referee,
        "points": 0.01,
        "last_used": datetime.now().isoformat()
    })

    save_data(db)

    return jsonify({
        "message": "Indicação registrada com sucesso!",
        "referrer_earned": 0.01,
        "referee_earned": 0.01
    }), 200


@app.route("/api/use-faucet", methods=["POST"])
@limiter.limit("5/minute")
def use_faucet():
    data = request.get_json()
    referee = data.get("referee", "").lower()
    faucet_token = data.get("faucet_token", "")

    if not is_valid_address(referee):
        return jsonify({"error": "Endereço inválido"}), 400

    if faucet_token != "VALID_FAUCET_USAGE":
        return jsonify({"error": "Token inválido"}), 401

    db = load_data()

    referral = get_referral(referee)

    if not referral:
        logging.info(f"Carteira não indicada: {referee} usou faucet")
        return jsonify({"message": "Faucet usado sem recompensa de indicação"}), 200

    # Adiciona 0.01 OMMV ao referrer
    referral["points"] = round(referral.get("points", 0) + 0.01, 2)
    referral["last_used"] = datetime.now().isoformat()

    save_data(db)

    return jsonify({
        "message": "Faucet usado com sucesso!",
        "referrer": referral["referrer"],
        "points_earned": 0.01,
        "total_points": referral["points"]
    }), 200


@app.route("/api/referral-status/<address>", methods=["GET"])
def referral_status(address):
    address = address.lower()
    info = get_referrer_info(address)

    return jsonify({
        "referrer": address,
        "total_points": info["total_points"],
        "total_paid": info["total_paid"],
        "total_unpaid": info["total_unpaid"],
        "referrals": info["referrals"]
    }), 200


@app.route("/api/payout-list", methods=["GET"])
def payout_list():
    db = load_data()
    multisend_list = []
    unpaid_total = 0

    for ref in db["referrals"]:
        points = ref.get("points", 0)
        if points > 0:
            multisend_list.append({
                "wallet": ref["referrer"],
                "amount": points
            })
            unpaid_total += points

    return jsonify({
        "total_people": len(multisend_list),
        "total_ommv_to_send": round(unpaid_total, 2),
        "multisend_list": multisend_list
    }), 200


@app.route("/api/mark-paid", methods=["POST"])
def mark_paid():
    secret_key = request.headers.get("X-Secret-Key")
    if secret_key != SECRET_KEY:
        return jsonify({"error": "Não autorizado"}), 401

    db = load_data()

    now = datetime.now().isoformat()
    summary = {}

    for ref in db["referrals"]:
        referrer = ref["referrer"]
        points = ref.get("points", 0)

        if points <= 0:
            continue

        if referrer not in summary:
            summary[referrer] = 0
        summary[referrer] += points

        # Zerar pontos no registro original
        ref["points"] = 0

    # Atualizar ou criar registros em paid_referrals
    for referrer, amount in summary.items():
        found = False
        for paid in db["paid_referrals"]:
            if paid["referrer"] == referrer:
                paid["total_paid"] = round(paid.get("total_paid", 0) + amount, 2)
                paid["last_paid_at"] = now
                found = True
                break
        if not found:
            db["paid_referrals"].append({
                "referrer": referrer,
                "total_paid": amount,
                "last_paid_at": now
            })

    save_data(db)

    return jsonify({
        "message": "Saldo não pago foi marcado como pago.",
        "summary": summary
    }), 200


@app.route("/")
def index():
    return jsonify({"status": "Backend rodando"}), 200


# ========================
# Iniciar Servidor
# ========================

if __name__ == "__main__":
    import threading

    # Inicia thread de backup
    backup_thread = threading.Thread(target=start_backup_scheduler, daemon=True)
    backup_thread.start()

    # Iniciar servidor Flask
    app.run(host="0.0.0.0", port=PORT)
